// Generated from arithmetic.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class arithmeticLexer extends Lexer {
	public static readonly VARIABLE = 1;
	public static readonly SCIENTIFIC_NUMBER = 2;
	public static readonly LPAREN = 3;
	public static readonly RPAREN = 4;
	public static readonly PLUS = 5;
	public static readonly MINUS = 6;
	public static readonly TIMES = 7;
	public static readonly DIV = 8;
	public static readonly GT = 9;
	public static readonly LT = 10;
	public static readonly EQ = 11;
	public static readonly POINT = 12;
	public static readonly POW = 13;
	public static readonly WS = 14;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"UNSIGNED_INTEGER", "VARIABLE", "VALID_ID_START", "VALID_ID_CHAR", "SCIENTIFIC_NUMBER", 
		"NUMBER", "E", "SIGN", "LPAREN", "RPAREN", "PLUS", "MINUS", "TIMES", "DIV", 
		"GT", "LT", "EQ", "POINT", "POW", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'('", "')'", "'+'", "'-'", "'*'", "'/'", 
		"'>'", "'<'", "'='", "'.'", "'^'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "VARIABLE", "SCIENTIFIC_NUMBER", "LPAREN", "RPAREN", "PLUS", 
		"MINUS", "TIMES", "DIV", "GT", "LT", "EQ", "POINT", "POW", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(arithmeticLexer._LITERAL_NAMES, arithmeticLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return arithmeticLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(arithmeticLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "arithmetic.g4"; }

	// @Override
	public get ruleNames(): string[] { return arithmeticLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return arithmeticLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return arithmeticLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return arithmeticLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x10u\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x03\x02\x06\x02-\n\x02\r\x02" +
		"\x0E\x02.\x03\x03\x03\x03\x07\x033\n\x03\f\x03\x0E\x036\v\x03\x03\x04" +
		"\x05\x049\n\x04\x03\x05\x03\x05\x05\x05=\n\x05\x03\x06\x03\x06\x03\x06" +
		"\x05\x06B\n\x06\x03\x06\x03\x06\x05\x06F\n\x06\x03\x07\x06\x07I\n\x07" +
		"\r\x07\x0E\x07J\x03\x07\x03\x07\x06\x07O\n\x07\r\x07\x0E\x07P\x05\x07" +
		"S\n\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03" +
		"\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11" +
		"\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x06\x15p\n\x15" +
		"\r\x15\x0E\x15q\x03\x15\x03\x15\x02\x02\x02\x16\x03\x02\x02\x05\x02\x03" +
		"\x07\x02\x02\t\x02\x02\v\x02\x04\r\x02\x02\x0F\x02\x02\x11\x02\x02\x13" +
		"\x02\x05\x15\x02\x06\x17\x02\x07\x19\x02\b\x1B\x02\t\x1D\x02\n\x1F\x02" +
		"\v!\x02\f#\x02\r%\x02\x0E\'\x02\x0F)\x02\x10\x03\x02\x06\x05\x02C\\aa" +
		"c|\x04\x02GGgg\x04\x02--//\x05\x02\v\f\x0F\x0F\"\"\x02w\x02\x05\x03\x02" +
		"\x02\x02\x02\v\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02" +
		"\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02" +
		"\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02" +
		"\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02" +
		"\x02)\x03\x02\x02\x02\x03,\x03\x02\x02\x02\x050\x03\x02\x02\x02\x078\x03" +
		"\x02\x02\x02\t<\x03\x02\x02\x02\v>\x03\x02\x02\x02\rH\x03\x02\x02\x02" +
		"\x0FT\x03\x02\x02\x02\x11V\x03\x02\x02\x02\x13X\x03\x02\x02\x02\x15Z\x03" +
		"\x02\x02\x02\x17\\\x03\x02\x02\x02\x19^\x03\x02\x02\x02\x1B`\x03\x02\x02" +
		"\x02\x1Db\x03\x02\x02\x02\x1Fd\x03\x02\x02\x02!f\x03\x02\x02\x02#h\x03" +
		"\x02\x02\x02%j\x03\x02\x02\x02\'l\x03\x02\x02\x02)o\x03\x02\x02\x02+-" +
		"\x042;\x02,+\x03\x02\x02\x02-.\x03\x02\x02\x02.,\x03\x02\x02\x02./\x03" +
		"\x02\x02\x02/\x04\x03\x02\x02\x0204\x05\x07\x04\x0213\x05\t\x05\x0221" +
		"\x03\x02\x02\x0236\x03\x02\x02\x0242\x03\x02\x02\x0245\x03\x02\x02\x02" +
		"5\x06\x03\x02\x02\x0264\x03\x02\x02\x0279\t\x02\x02\x0287\x03\x02\x02" +
		"\x029\b\x03\x02\x02\x02:=\x05\x07\x04\x02;=\x042;\x02<:\x03\x02\x02\x02" +
		"<;\x03\x02\x02\x02=\n\x03\x02\x02\x02>E\x05\r\x07\x02?A\x05\x0F\b\x02" +
		"@B\x05\x11\t\x02A@\x03\x02\x02\x02AB\x03\x02\x02\x02BC\x03\x02\x02\x02" +
		"CD\x05\x03\x02\x02DF\x03\x02\x02\x02E?\x03\x02\x02\x02EF\x03\x02\x02\x02" +
		"F\f\x03\x02\x02\x02GI\x042;\x02HG\x03\x02\x02\x02IJ\x03\x02\x02\x02JH" +
		"\x03\x02\x02\x02JK\x03\x02\x02\x02KR\x03\x02\x02\x02LN\x070\x02\x02MO" +
		"\x042;\x02NM\x03\x02\x02\x02OP\x03\x02\x02\x02PN\x03\x02\x02\x02PQ\x03" +
		"\x02\x02\x02QS\x03\x02\x02\x02RL\x03\x02\x02\x02RS\x03\x02\x02\x02S\x0E" +
		"\x03\x02\x02\x02TU\t\x03\x02\x02U\x10\x03\x02\x02\x02VW\t\x04\x02\x02" +
		"W\x12\x03\x02\x02\x02XY\x07*\x02\x02Y\x14\x03\x02\x02\x02Z[\x07+\x02\x02" +
		"[\x16\x03\x02\x02\x02\\]\x07-\x02\x02]\x18\x03\x02\x02\x02^_\x07/\x02" +
		"\x02_\x1A\x03\x02\x02\x02`a\x07,\x02\x02a\x1C\x03\x02\x02\x02bc\x071\x02" +
		"\x02c\x1E\x03\x02\x02\x02de\x07@\x02\x02e \x03\x02\x02\x02fg\x07>\x02" +
		"\x02g\"\x03\x02\x02\x02hi\x07?\x02\x02i$\x03\x02\x02\x02jk\x070\x02\x02" +
		"k&\x03\x02\x02\x02lm\x07`\x02\x02m(\x03\x02\x02\x02np\t\x05\x02\x02on" +
		"\x03\x02\x02\x02pq\x03\x02\x02\x02qo\x03\x02\x02\x02qr\x03\x02\x02\x02" +
		"rs\x03\x02\x02\x02st\b\x15\x02\x02t*\x03\x02\x02\x02\r\x02.48<AEJPRq\x03" +
		"\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!arithmeticLexer.__ATN) {
			arithmeticLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(arithmeticLexer._serializedATN));
		}

		return arithmeticLexer.__ATN;
	}

}

